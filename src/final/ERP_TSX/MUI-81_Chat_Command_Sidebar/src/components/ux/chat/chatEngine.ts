
// src/components/ux/chat/chatEngine.ts ‚Äî mock chat engine + command handlers
export type Role = 'Admin'|'Finance'|'PM'|'HR'|'Employee';

export type ChatMsg = {
  id: string;
  from: 'user'|'assistant'|'system';
  text: string;
  at: number;
};

export type Command = {
  id: string;
  title: string;
  sample?: string;
  run: (input: string, ctx: { role: Role }) => Promise<string>;
  keywords?: string[];
};

const rid = () => Math.random().toString(36).slice(2);

const sleep = (ms:number) => new Promise(res => setTimeout(res, ms));

// Simple templates per role
const roleGreetings: Record<Role, string> = {
  Admin: "Xin ch√†o Admin! Em c√≥ th·ªÉ gi√∫p anh qu·∫£n l√Ω quy·ªÅn, audit logs v√† c·∫•u h√¨nh h·ªá th·ªëng.",
  Finance: "Ch√†o Finance! Em s·∫µn s√†ng h·ªó tr·ª£ Expense, PO/Invoice, ƒë·ªëi so√°t v√† b√°o c√°o.",
  PM: "Ch√†o PM! Em c√≥ th·ªÉ h·ªó tr·ª£ tasks, sprint, burn-down v√† risk register.",
  HR: "Ch√†o HR! Em c√≥ th·ªÉ h·ªó tr·ª£ onboarding, ch·∫•m c√¥ng, v√† b√°o c√°o nh√¢n s·ª±.",
  Employee: "Xin ch√†o! Em c√≥ th·ªÉ h∆∞·ªõng d·∫´n anh t·∫°o y√™u c·∫ßu, xin ngh·ªâ, ho·∫∑c b√°o c√°o ƒë∆°n gi·∫£n."
};

// Command handlers (mock)
export const commands: Command[] = [
  {
    id:'help',
    title:'Help',
    sample:'/help',
    keywords:['help','assist'],
    run: async () => {
      return [
        "C√°c l·ªánh ph·ªï bi·∫øn:",
        "‚Ä¢ /expense policy ‚Äî T√≥m t·∫Øt ch√≠nh s√°ch Expense",
        "‚Ä¢ /po new ‚Äî T·∫°o PO nhanh (m·∫´u form)",
        "‚Ä¢ /task status <PRJ> ‚Äî T√¨nh tr·∫°ng d·ª± √°n",
        "‚Ä¢ /approve <entity> ‚Äî G·ª£i √Ω c√°c b∆∞·ªõc ph√™ duy·ªát",
        "‚Ä¢ /kb <keyword> ‚Äî T√¨m trong knowledge base",
      ].join('\n');
    }
  },
  {
    id:'expense.policy',
    title:'Expense policy',
    sample:'/expense policy',
    keywords:['expense','policy','quy trinh chi phi'],
    run: async () => {
      return [
        "Ch√≠nh s√°ch Expense (r√∫t g·ªçn):",
        "‚Ä¢ H·∫°n m·ª©c m·∫∑c ƒë·ªãnh: 2,000,000 VND / ng√†y cho Meal; 10,000,000 VND / trip cho Travel.",
        "‚Ä¢ Ph·∫£i ƒë√≠nh k√®m ho√° ƒë∆°n VAT n·∫øu > 200,000 VND.",
        "‚Ä¢ Th·ªùi h·∫°n n·ªôp: trong v√≤ng 07 ng√†y k·ªÉ t·ª´ khi ph√°t sinh.",
        "‚Ä¢ Quy tr√¨nh duy·ªát: Line manager ‚Üí Finance.",
        "L·ªánh nhanh: g√µ `/expense new` ƒë·ªÉ m·ªü form t·∫°o Expense (mock)."
      ].join('\n');
    }
  },
  {
    id:'expense.new',
    title:'Create expense (mock form)',
    sample:'/expense new',
    keywords:['expense','new'],
    run: async () => {
      return "üìÑ M·ªü form t·∫°o Expense gi·∫£ l·∫≠p: Date, Category, Amount, Vendor. (K·∫øt n·ªëi FIN‚Äë08 ·ªü b·∫£n th·∫≠t)";
    }
  },
  {
    id:'po.new',
    title:'Create PO (mock form)',
    sample:'/po new',
    keywords:['po','purchase order','new'],
    run: async () => "üìÑ M·ªü form t·∫°o PO gi·∫£ l·∫≠p: Vendor, Lines, Delivery date. (K·∫øt n·ªëi PRC‚Äë05 ·ªü b·∫£n th·∫≠t)"
  },
  {
    id:'task.status',
    title:'Project status',
    sample:'/task status PRJ-A',
    keywords:['task','status','project'],
    run: async (input) => {
      const prj = (input.split(' ').pop() || 'PRJ-A').toUpperCase();
      await sleep(350);
      return [
        `T√¨nh tr·∫°ng ${prj} (mock):`,
        "‚Ä¢ Tasks: 42 (Done 28, Doing 10, To Do 4)",
        "‚Ä¢ Sprint burndown: 72%",
        "‚Ä¢ Risks: 1 (High), 3 (Medium)",
        "‚Ä¢ Blockers: Ch·ªù vendor giao h√†ng.",
      ].join('\n');
    }
  },
  {
    id:'approve',
    title:'Approval guidance',
    sample:'/approve EX-1023',
    keywords:['approve','flow','duyet'],
    run: async (input) => {
      const id = input.split(' ').pop() || 'EX-0000';
      return [
        `H∆∞·ªõng d·∫´n ph√™ duy·ªát cho ${id} (mock):`,
        "1) Ki·ªÉm tra h·ªì s∆° & ho√° ƒë∆°n ƒë√≠nh k√®m.",
        "2) ƒê·ªëi chi·∫øu ng√¢n s√°ch/Cost center.",
        "3) N·∫øu h·ª£p l·ªá ‚Üí Approve; n·∫øu thi·∫øu ‚Üí Request changes.",
        "G·ª£i √Ω l·ªánh: `/open "+id+"` ƒë·ªÉ m·ªü b·∫£n ghi (mock)."
      ].join('\n');
    }
  },
  {
    id:'kb.search',
    title:'Search knowledge base',
    sample:'/kb OCR invoice',
    keywords:['kb','knowledge','search','docs'],
    run: async (input) => {
      const q = input.replace(/^\/kb\s*/i,'').trim()||'OCR invoice';
      return [
        `K·∫øt qu·∫£ KB cho ‚Äú${q}‚Äù (mock):`,
        "‚Ä¢ H∆∞·ªõng d·∫´n OCR ho√° ƒë∆°n ‚Äì v1.3",
        "‚Ä¢ Quy ƒë·ªãnh l∆∞u tr·ªØ t√†i li·ªáu 2024",
        "‚Ä¢ M·∫´u PO chu·∫©n (xlsx)",
        "G√µ `/open DOC-1029` ƒë·ªÉ xem t√†i li·ªáu (mock)."
      ].join('\n');
    }
  }
];

export async function answer(input: string, role: Role): Promise<ChatMsg[]>{
  const id = rid();
  // slash command detection
  const slash = input.trim().startsWith('/');
  if (slash){
    const found = commands.find(c => input.toLowerCase().startsWith('/'+c.id.replace('.',' ')) || (c.sample && input.toLowerCase().startsWith(c.sample.toLowerCase())) || (c.id==='help' && input.trim()==='/help'));
    if (found){
      const out = await found.run(input, { role });
      return [{ id, from:'assistant', text: out, at: Date.now() }];
    }
    // fallback
    return [{ id, from:'assistant', text: "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªánh. G√µ `/help` ƒë·ªÉ xem danh s√°ch l·ªánh.", at: Date.now() }];
  }

  // small‚Äëtalk / intent guess (mock)
  const greet = roleGreetings[role];
  if (/^(hi|hello|chao|xin chao)/i.test(input)) {
    return [{ id, from:'assistant', text: greet, at: Date.now() }];
  }
  // heuristic intents
  if (/expense/i.test(input)) {
    return [{ id, from:'assistant', text: "Anh mu·ªën xem ch√≠nh s√°ch Expense hay t·∫°o Expense m·ªõi? G√µ `/expense policy` ho·∫∑c `/expense new`.", at: Date.now() }];
  }
  if (/po|purchase/i.test(input)) {
    return [{ id, from:'assistant', text: "ƒê·ªÉ t·∫°o PO nhanh, g√µ `/po new`. C·∫ßn duy·ªát lu·ªìng? G√µ `/approve PO-xxxx`.", at: Date.now() }];
  }
  return [{ id, from:'assistant', text: "Em ch∆∞a hi·ªÉu √Ω anh. G√µ `/help` ho·∫∑c m√¥ t·∫£ chi ti·∫øt h∆°n.", at: Date.now() }];
}
